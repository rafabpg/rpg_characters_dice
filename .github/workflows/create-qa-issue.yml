name: Generate QA Test Issue on PR

on:
  pull_request:
    types: [opened, ready_for_review]

jobs:
  create-qa-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write  # PermissÃ£o para criar issues
      pull-requests: write  # PermissÃ£o para comentar em PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create QA Issue
        uses: actions/github-script@v6
        id: create-issue
        with:
          script: |
            try {
              // 1. Busca o template
              const templatePath = '.github/ISSUE_TEMPLATE/teste-aceitacao.md';
              const template = fs.readFileSync(templatePath, 'utf8');

              // 2. Extrai a issue original do nome da branch (ex: feat/123-minha-feature)
              const branchRef = context.payload.pull_request.head.ref;
              const linkedIssueId = branchRef.match(/(feat|fix)\/(\d+)-?/)?.[2] || '';

              // 3. Preenche o template dinamicamente
              const issueBody = template
                .replace(/{{PR_NUMBER}}/g, context.payload.number)
                .replace(/{{PR_DESCRIPTION}}/g, context.payload.pull_request.body || "Sem descriÃ§Ã£o")
                .replace(/{{ISSUE_ORIGINAL}}/g, linkedIssueId);

              // 4. Cria a issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `âœ… Teste de AceitaÃ§Ã£o: PR #${context.payload.number} - ${context.payload.pull_request.title}`,
                body: issueBody,
                labels: ['qa', 'needs testing']
              });

              // 5. Comenta no PR com o link
              await github.rest.issues.createComment({
                issue_number: context.payload.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ðŸ“Œ **Issue de teste criada:** ${issue.data.html_url}\n\n_Adicione evidÃªncias de teste nesta issue._`
              });

              return issue.data.html_url;
            } catch (error) {
              core.setFailed(`Falha ao criar issue: ${error.message}`);
            }

      - name: Link QA Issue to Project (Opcional)
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.projects.createCard({
              column_id: 'COLUMN_ID',  // Substitua pelo ID da coluna "QA" no seu Project
              content_id: steps.create-issue.outputs.id,
              content_type: 'Issue'
            });